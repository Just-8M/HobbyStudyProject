<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hobbyStudy.dao.UserMapper">
	<resultMap id="BaseResultMap" type="com.hobbyStudy.entity.User">
		<id column="id" property="id" jdbcType="INTEGER"/>
		<result column="realname" property="realname"  jdbcType="VARCHAR" />
		<result column="userid" property="userid"  jdbcType="VARCHAR" />
		<result column="nickname" property="nickname"  jdbcType="VARCHAR" />
		<result column="userCategory" property="userCategory"  jdbcType="VARCHAR" />
		<result column="password" property="password"  jdbcType="VARCHAR" />
		<result column="gender" property="gender"  jdbcType="INTEGER" />
		<result column="Identity" property="Identity"  jdbcType="VARCHAR" />
		<result column="header" property="header"  jdbcType="VARCHAR" />
		<result column="mobile" property="mobile"  jdbcType="VARCHAR" />
		<result column="status" property="status"  jdbcType="INTEGER" />
		<result column="birthday" property="birthday"  jdbcType="DATE" />
		<result column="education" property="education"  jdbcType="VARCHAR" />
		<result column="college_code" property="collegeCode"  jdbcType="VARCHAR" />
		<result column="college_name" property="collegeName"  jdbcType="VARCHAR" />
		<result column="cert_no" property="certNo"  jdbcType="VARCHAR" />
		<result column="title" property="title"  jdbcType="VARCHAR" />
		<result column="sign" property="sign"  jdbcType="VARCHAR" />
		<result column="money" property="money"  jdbcType="VARCHAR" />
		<result column="open_id" property="openId"  jdbcType="VARCHAR" />
		<result column="wechat_id" property="wechatId"  jdbcType="VARCHAR" />
		<result column="qq" property="qq"  jdbcType="VARCHAR" />
		<result column="login_time" property="loginTime"  jdbcType="DATE" />
		<result column="ip" property="ip"  jdbcType="VARCHAR" />
		<result column="province" property="province"  jdbcType="VARCHAR" />
		<result column="city" property="city"  jdbcType="VARCHAR" />
		<result column="district" property="district"  jdbcType="VARCHAR" />
		<result column="fans" property="fans"  jdbcType="INTEGER" />
		<result column="likeCount" property="likeCount"  jdbcType="VARCHAR" />
		<result column="weight" property="weight"  jdbcType="INTEGER" />
		<result column="create_time" property="createTime"  jdbcType="DATE" />
		<result column="del" property="del"  jdbcType="TINYINT" />
	</resultMap>
	<sql id="Base_Column_List"> 
		id,realname,userid,nickname,userCategory,password,gender,Identity,header,mobile,status,
		birthday,education,college_code,college_name ,cert_no,title,sign,money,open_id,wechat_id,qq,
		login_time,ip,province,city,district,fans,likeCount,weight,create_time,del
	</sql>
	<!-- Ajax注册查询 -->
	<select id="AjaxRegisterUsername"  resultType="Integer">
		SELECT
		count(1) cnt
		FROM  hs_user
		WHERE userid = #{userid,jdbcType=VARCHAR}
	</select>
	<!-- 
		flushCache="true":
		当用在select语句时，表示调用select语句不会清空本地缓存和二级缓存
  		用在insert,update.delete时，会导致清空本地和二级缓存。
  		 parameterType：  表示插入的类型   
  		 flushCache="true"    每次添加完成之后，都要进行刷新一次
  		 useGeneratedKeys="true"  表示主键是自增
	 -->
	<insert id="getByUsernameAndPassword"  parameterType="com.hobbyStudy.entity.User" 
	 				 flushCache="true" useGeneratedKeys="true"   keyProperty="id" >
		INSERT INTO hs_user
		<trim prefix="(" suffix=")"  suffixOverrides="," >
			<if test="realname != null ">
			realname,
			</if>
			<if test="userid != null ">
			userid,
			</if>
			<if test="nickname != null ">
			nickname,
			</if>
			<if test="userCategory != null ">
			userCategory,
			</if>
			<if test="password != null ">
			password,
			</if>
			<if test="gender != null ">
			gender,
			</if>
			<if test="Identity != null ">
			Identity,
			</if>
			<if test="header != null ">
			header,
			</if>
			<if test="mobile != null ">
			mobile,
			</if>
			<if test="status != null ">
			status,
			</if>
			<if test="birthday != null ">
			birthday,
			</if>
			<if test="education != null ">
			education,
			</if>
			<if test="collegeCode != null ">
			college_code,
			</if>
			<if test="collegeName != null ">
			college_name,
			</if>
			<if test="certNo != null ">
			cert_no,
			</if>
			<if test="title != null ">
			title,
			</if>
			<if test="sign != null ">
			sign,
			</if>
			<if test="money != null ">
			money,
			</if>
			<if test="openId != null ">
			open_id,
			</if>
			<if test="wechatId != null ">
			wechat_id,
			</if>
			<if test="qq != null ">
			qq,
			</if>
			<if test="loginTime != null ">
			login_time,
			</if>
			<if test="ip != null ">
			ip,
			</if>
			<if test="province != null ">
			province,
			</if>
			<if test="city != null ">
			city,
			</if>
			<if test="district != null ">
			district,
			</if>
			<if test="fans != null ">
			fans,
			</if>
			<if test="likeCount != null ">
			likeCount,
			</if>
			<if test="weight != null ">
			weight,
			</if>
			<if test="createTime != null">
			create_time,
			</if>
			<if test="del != null ">
			del,
			</if>
		</trim>
		VALUES
		<trim prefix="(" suffix=")"  suffixOverrides="," >
			<if test="realname != null ">
			#{realname, jdbcType=VARCHAR},
			</if>
			
			<if test="userid != null ">
			#{userid, jdbcType=VARCHAR},
			</if>
			<if test="nickname != null ">
			#{nickname, jdbcType=VARCHAR},
			</if>
			<if test="userCategory != null ">
			#{userCategory, jdbcType=VARCHAR},
			</if>
			<if test="password != null ">
			#{password, jdbcType=VARCHAR},
			</if>
			<if test="gender != null ">
			#{gender, jdbcType=INTEGER},
			</if>
			<if test="Identity != null ">
			#{Identity, jdbcType=VARCHAR},
			</if>
			<if test="header != null ">
			#{header, jdbcType=VARCHAR},
			</if>
			<if test="mobile != null ">
			#{mobile, jdbcType=VARCHAR},
			</if>
			<if test="status != null ">
			#{status, jdbcType=INTEGER},
			</if>
			<if test="birthday != null ">
			#{birthday, jdbcType=DATE},
			</if>
			<if test="education != null ">
			#{education, jdbcType=VARCHAR},
			</if>
			<if test="collegeCode != null ">
			#{collegeCode, jdbcType=VARCHAR},
			</if>
			<if test="collegeName != null ">
			#{collegeName, jdbcType=VARCHAR},
			</if>
			<if test="certNo != null ">
			#{certNo, jdbcType=VARCHAR},
			</if>
			<if test="title != null ">
			#{title, jdbcType=VARCHAR},
			</if>
			<if test="sign != null ">
			#{sign, jdbcType=VARCHAR},
			</if>
			<if test="money != null ">
			#{money, jdbcType=VARCHAR},
			</if>
			<if test="openId != null ">
			#{openId, jdbcType=VARCHAR},
			</if>
			<if test="wechatId != null ">
			#{wechatId, jdbcType=VARCHAR},
			</if>
			<if test="qq != null ">
			#{qq, jdbcType=VARCHAR},
			</if>
			<if test="loginTime != null ">
			#{loginTime, jdbcType=DATE},
			</if>
			<if test="ip != null ">
			#{ip, jdbcType=VARCHAR},
			</if>
			<if test="province != null ">
			#{province, jdbcType=VARCHAR},
			</if>
			<if test="city != null ">
			#{city, jdbcType=VARCHAR},
			</if>
			<if test="district != null ">
			#{district, jdbcType=VARCHAR},
			</if>
			<if test="fans != null ">
			#{fans, jdbcType=INTEGER},
			</if>
			<if test="likeCount != null ">
			#{likeCount, jdbcType=VARCHAR},
			</if>
			<if test="weight != null ">
			#{weight, jdbcType=INTEGER},
			</if>
			<if test="createTime != null ">
			#{createTime, jdbcType=DATE},
			</if>
			<if test="del != null ">
			#{del, jdbcType=TINYINT},
			</if>
		</trim>
	</insert>
	
	<!-- parameterType的用法，parameterType为输入参数，在配置的时候，配置相应的
			输入参数类型即可。parameterType有基本数据类型和复杂的数据类型配置。 -->
    <!-- id:statement的id 或者叫做sql的id -->
	<!-- parameterType:声明输入参数的类型 -->
	<!-- resultType:声明输出结果的类型，应该填写pojo的全路径 -->
	<!-- #{}：输入参数的占位符，相当于jdbc的？ -->
	<!-- 登录 -->
	<!--  <select id="queryUsernameAndPsw"  parameterType="java.lang.String" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM hs_user
		WHERE userid = #{userid,jdbcType=VARCHAR} And password= #{password,jdbcType=VARCHAR}
	</select>  -->
	<select id="queryUsernameAndPsw"  resultType="java.lang.String" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM  hs_user
		WHERE userid = #{userid,jdbcType=VARCHAR} And password= #{password,jdbcType=VARCHAR}
	</select>
	<!-- 首页推荐讲师 -->
	<select id="getRecommendTeacher"  parameterType="com.hobbyStudy.entity.User" resultMap="BaseResultMap">
		SELECT 
		<include refid="Base_Column_List" />
		FROM  hs_user
		ORDER BY weight DESC 
		LIMIT 5
	</select>
	<!-- 
		如果parameterType="java.lang.String"是一个简单类型，#{里面的值可以任意写} 
		${} 是进行拼串用的， 传入简单类型时  里面只能是${value}
	-->
	
	<select id="getByUsername" parameterType="java.lang.String"  resultMap="BaseResultMap">
		SELECT 
		<include refid="Base_Column_List"/>
		FROM hs_user
		WHERE userid = #{userid, jdbcType=VARCHAR}
		AND DEL = 0
	</select>
	<select id="queryTaBySort" parameterType="com.hobbyStudy.entity.User"  resultMap="BaseResultMap"> 
		SELECT 
		<include refid="Base_Column_List"/>
		FROM hs_user
		ORDER BY fans DESC 
		LIMIT 10
	</select>
	<!--  通过学校查询学生  -->
	<select id="queryUserBySchool" parameterType="com.hobbyStudy.entity.User"  resultMap="BaseResultMap"> 
		SELECT 
		<include refid="Base_Column_List"/>
		FROM hs_user
		WHERE college_name = #{collegeName, jdbcType=VARCHAR}
		AND DEL = 0
	</select>
	
	<!--  通过学校查询学生  -->
	<select id="queryPersonDetail" parameterType="com.hobbyStudy.entity.User"  resultMap="BaseResultMap"> 
		SELECT 
		<include refid="Base_Column_List"/>
		FROM hs_user
		WHERE id = #{id,jdbcType=INTEGER}
		AND DEL = 0
	</select>
	<!--寻Ta界面点赞更新  -->
	<update id="updateLikeCount" parameterType="com.hobbyStudy.entity.User">
	 update hs_user  SET
	    likeCount = #{likeCount}
        where userid = #{userid}
	</update>
	<!-- <update id="updateLikeCount" parameterType="java.lang.String">
	 update hs_user  SET
	    likeCount = #{likeCount}
        where userid = #{userid}
	</update> -->
	
	<insert id="insertUserLikeirem" parameterType="com.hobbyStudy.entity.User">
	
	</insert>	
</mapper>